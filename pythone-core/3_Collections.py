"""
* Списки -упорядоченная изменяемая колекция объектов (List в Java)
* Словари - неупорядоченное множество пар key/value (Map в Java )
* Кортеж - упорядоченная не изменяемая коллекция объектов (Array в Java)
* Множество - неупорядоченный набор неповторяющихся объектов (Set в Java)

* []-пустой список
* {} - пустой словарь
* set() - пустое множество, т.к. фигурные скобки уже используются для словарей
* () - пустой кортеж
"""
# СПИСКИ, создание
empty_list = list()
list1= ['Toyota', 'RAV4', 2.2, 60807]
list2 = [[1, 2, 3], ['a', 'b', 'c'], ['One', 'Two', 'Three']]
list3 = list('cat')               # ['c', 'a', 't'] преобразования строки в список
list4 = list(('c', 'a', 't'))     # ['c', 'a', 't'] преобразования кортежа в список
list5 = 'q/w/e/r/t/y'.split('/')  # ['q', 'w', 'e', 'r', 't', 'y']
print(list5)

# извлечение
var = list1[0]      # 'Toyota'
var = list2[1][1]   # 'b'
list6 = list1[0:2]  # извлечь часть списка ['Toyota', 'RAV4']
print('Индекс элемента по значание: ' + str(list1.index(2.2)))  #
print(list6)

# прочие операции со списками
list1.append('a')     # добавить в конец
list1.extend([3, 4])  # добавить коллекцию к списку
list1.insert(0, 1)    # добавить по индексу, перед который будет вставка 1
list1.pop()           # удалить с конца, возвращает удалённый объект
list1.pop(1)          # удалить по индексу, возвращает удалённый объект. Ошибка, если несуществующий индекс или список пуст
del list1[1]          # del является оператором Python, а не методом списка. Он похож на противоположную присваиванию (=) операцию: открепляет имя от объекта Python
print(list1)
list1.remove(2.2)     # удалить по значению
print(2.2 in list1)   # проверка на существование элемента с помощью оператора IN

str = 'aa*bb*cc*3'
list1 = str.split('*')  # создать список
print('.'.join(list1))  # преобразовать список в строку, но будет исключение, если в списке есть не строковые элементы
list1.sort(reverse=True)  # сортировка
print(list1)
print(sorted(list1))    # возвращает сортиованную копию списка


#######    КОРТЕЖИ     ########################################################################################################
empty_tuple = ()
one_marx = 'Groucho',  #  ('Groucho',) Кортеж с одним элементом
print(one_marx)
array = ('ready', 'fire', 'aim')
array1 = tuple(list1)  # кортеж из списка
a, b, c = array  # кортежи позволяю присвоить несколько переменных за один раз

#######    СЛОВАРИ     ########################################################################################################
# создание
empty_dict = {}
dict1 = {
    "key1": "value",
    "key2": "value",
    "key3": "value",
}
dict([ ('a', 'b'), ('c', 'd'), ('e', 'f') ])  # {'c': 'd', 'a': 'b', 'e': 'f'}
dict((['a', 'b'], ['c', 'd'], ['e', 'f']))    # {'c': 'd', 'a': 'b', 'e': 'f'}
dict([ 'ab', 'cd', 'ef' ])                    # {'c': 'd', 'a': 'b', 'e': 'f'}
dict(('ab', 'cd', 'ef'))                      # {'c': 'd', 'a': 'b', 'e': 'f'}

dict1['key4'] = 'value4'  # добавить ключ и значение
dict2 = {
    "key1": "value1",
    "key5": "value5"
}
dict1.update(dict2)  # объединение словарей. Дублирующийся ключ во втором словаре перезаписывает значение из перого словаря (исключения здесь нет)
del dict1['key1']       # удаление ключа
print('key2' in dict1)  # проверка наличия ключа
elem = dict1['key2']    # получить значение по существующему ключу, если ключа нет, то оштбка
print(dict1.get('key1', 'Not in dict'))  # получить значение по ключу, если его нет, вернуть опциональное значение

list(dict1.keys())   # получить итерабельный объект с ключами и преобразовать его в list
list(dict1.values())  # получить итерабельный объект со значениеми

list(dict1.items())  # [('key2', 'value'), ('key3', 'value'), ('key4', 'value4'), ('key5', 'value5')]

#######    МНОЖЕСТВА     ########################################################################################################
# это как словарь без значение, только одни ключи, поэтому используются {} скобки

# инициализация
empty_set = set()
set1 = {0, 2, 4, 6, 8}
set2 = set('letters')
set(['Dasher', 'Dancer', 'Prancer', 'Mason-Dixon'])  # множество из списка
set(('Ummagumma', 'Echoes', 'Atom Heart Mother'))    # множество из кортежа
set({'apple': 'red', 'orange': 'orange', 'cherry': 'red'})  # множество ключей из словаря

# Такое использование множеств самое распространенное, напрмер, уникальное име коктеля и его инградиенты
drinks = {
    'martini': {'vodka', 'vermouth'},
    'black russian': {'vodka', 'kahlua'},
    'white russian': {'cream', 'kahlua', 'vodka'},
    'manhattan': {'rye', 'vermouth', 'bitters'},
    'screwdriver': {'orange juice', 'vodka'}
}

# операции над множествами
set1.intersection(set2)  # или set1 & set2 -  пересечение
set1.union(set2)  # или set1 | set2 - объединение
set1.difference(set2)  # или set1 - set2 - разность
set1.symmetric_difference(set2)  # или set1 ^ set2 - XOR
set1.issubset(set2)  # или set1 <= set2 проверка на подмножество (похож на знак принадлежности)
